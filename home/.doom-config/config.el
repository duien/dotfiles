;;; config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This file is automatically generated from `config.org' and any changes will be over-written.

(setq user-full-name "Emily Hyland"
      user-mail-address "emily@duien.com")

(setq doom-font (font-spec :family "IBM Plex Mono" :size 15 :weight 'normal))
(setq doom-theme 'doom-isohedron)

(setq doom-variable-pitch-font (font-spec :family "iA Writer Quattro V" :size 15 :weight 'normal))

(setq ns-use-thin-smoothing t ;; not sure if this actually does anything useful?
      line-spacing 0.1
      display-line-numbers-type t ;; show absolute line numbers
      scroll-margin 5 ;; keep a few lines at the edge of the screen
      all-the-icons-scale-factor 1.0 ;; default of 1.2 is slightly too large
      emojify-emoji-set "twemoji-v2"
)

(setq doom-themes-treemacs-enable-variable-pitch nil
      doom-themes-treemacs-theme "doom-atom" ;; not actually sure about the styling difference here
)
(setq doom-gruvbox-light-brighter-comments nil
      doom-gruvbox-light-variant "hard"
      doom-gruvbox-light-brighter-modeline t)
(setq doom-flatwhite-brighter-modeline t)
(setq doom-nord-light-brighter-modeline t)

(setq spacemacs-theme-comment-bg nil
      spacemacs-theme-comment-italic t
      spacemacs-theme-org-height nil)

(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-string-face  :slant italic)
  ;; '(markdown-pre-face :inherit fixed-pitch-face)
  '(markdown-language-keyword-face :inherit markdown-pre-face :slant italic)
  '(line-number :weight semilight)
  '(line-number-current-line :weight semibold)
  )

(setq prettify-symbols-alist '())

(use-package! mixed-pitch
  :init
;;   ;; (add-to-list 'mixed-pitch-fixed-pitch-faces
;;                ;; 'markdown-pre 'org-superstar-header-bullet)
  :hook
  (org-mode . mixed-pitch-mode)
  )

(use-package! ligature
 :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t)
)

(use-package! modus-themes
  :init
  ;; Set up modus config before loading
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-subtle-line-numbers t
        modus-themes-intense-markup t
        modus-themes-fringes 'intense
        modus-themes-mode-line '(borderless)
        modus-themes-syntax '(green-strings)
        modus-themes-prompts '(gray background intense)
        modus-themes-region '(bg-only accented)
        modus-themes-org-blocks 'gray-background
        modus-themes-headings
        '((1 . (rainbow background))
          (t . (monochrome regular)))
        )
  ;; Load theme files
  (modus-themes-load-themes)
  :config
  ;; Load an actual theme
  ;; This happens through the light/dark hook
  )

(setq mouse-wheel-tilt-scroll t)

(setq evil-vsplit-window-right t
      evil-split-window-below t
      )

(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (projectile-find-file))

(add-to-list 'auto-mode-alist '("CODEOWNERS" . conf-mode))

(add-hook! markdown-mode :append
           #'visual-line-mode)

(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")

(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode) ;; don't turn on hl-line by default
(remove-hook 'after-change-major-mode-hook #'+ligatures-init-buffer-h) ;; this disables too many ligatures - find a way to disable just prettyify-symbols-mode that doesn't break everything else

(setq so-long-threshold 1000)

(map! :leader :desc "Toggle file browser" :n "\\" #'+treemacs/toggle)

(after! treemacs
    (treemacs-follow-mode t))

(use-package! projectile
  :config
  (setq projectile-project-search-path
        '(("~/Code/" . 3)
         ("~/.homesick/repos" . 1)
         ))
  
  ;; (projectile-discover-projects-in-directory "~/Code/" 3)
  ;; (projectile-discover-projects-in-directory "~/.homesick/repos/")
  )

(defun flex-if-twiddle (pattern _index _total)
  (when (string-suffix-p "~" pattern)
    `(orderless-flex . ,(substring pattern 0 -1))))

(defun without-if-bang (pattern _index _total)
  (cond
   ((equal "!" pattern)
    '(orderless-literal . ""))
   ((string-prefix-p "!" pattern)
    `(orderless-without-literal . ,(substring pattern 1)))))

(setq orderless-matching-styles '(orderless-regexp)
      orderless-style-dispatchers '(without-if-bang flex-if-twiddle))

(setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Org/"
      org-log-done t
      org-log-into-drawer t
      org-cycle-separator-lines -1
      org-fontify-whole-heading-line t
      org-fontify-todo-headline t
      org-fontify-done-headline t
      org-ellipsis " ▼")
(setq org-superstar-cycle-headline-bullets nil
      org-superstar-special-todo-items t
      org-superstar-headline-bullets-list '("#" "•"))

(after! org
  (setq org-todo-keywords
        '((sequence "WAIT(w)" "FLAG(f)" "TODO(t)" "BLOK(b)" "HOLD(h)" "|" "DONE(d!)" "KILL(k@)")
          (sequence "QSTN(q)" "|" "  OK(o)" " YES(y)" "  NO(n)" "ANSR(a@)")
          (type "IDEA(I)" " YAK(Y)" "|")
          )
        ))
(after! org-superstar
  (setq org-superstar-todo-bullet-alist
        '(("TODO" . ?›)
          ("FLAG" . ?»)
          ("DONE" . ?✓)
          ("WAIT" . ?~)
          ("BLOK" . ?◊)
          ("HOLD" . ?≈)
          ("KILL" . ?×)
          ("QSTN" . ??) ;; QSTN
          ("ANSR" . ?•) ;; ANSR
          ("  OK" . ?·)
          (" YES" . ?·)
          ("  NO" . ?·)
          ("IDEA" . ?•)
          (" YAK" . ?∞)
          )
        org-superstar-prettify-item-bullets nil
        )
  )

(after! org
  (setq org-todo-keyword-faces
        ;; Colors for isohedron/flatwhite
        `(
          ("TODO" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-green))
          ("FLAG" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-orange))
          ("BLOK" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-red))
          ("QSTN" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-blue))

          ("IDEA" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-teal))
          (" YAK" :inherit 'org-todo :foreground ,(doom-color 'bg) :background ,(doom-color 'fw-purple))

          ("WAIT" :inherit 'org-done :foreground ,(doom-color 'fg-alt) :background ,(doom-color 'fw-base5))
          ("HOLD" :inherit 'org-todo :foreground ,(doom-color 'fw-yellow-text) :background ,(doom-color 'fw-yellow))

          ("ANSR" :inherit 'org-done :foreground ,(doom-color 'fw-blue))
          (" YES" :inherit 'org-done :foreground ,(doom-color 'fw-green))
          ("  NO" :inherit 'org-done :foreground ,(doom-color 'fw-red))
          ("  OK" :inherit 'org-done :foreground ,(doom-color 'fg-alt))

          ("DONE" :inherit 'org-done :foreground ,(doom-color 'fg-alt))
          ("KILL" :inherit 'org-done :foreground ,(doom-color 'fg-alt))
          )
        ;; A modus version
        ;; '(("TODO" . '(modus-themes-refine-green))
        ;;   ("FLAG" . '(modus-themes-intense-green))
        ;;   ("DONE" . '(modus-themes-nuanced-green))
        ;;   ("WAIT" . '(modus-themes-refine-yellow))
        ;;   ("BLOK" . '(modus-themes-intense-yellow))
        ;;   ("HOLD" . '(modus-themes-intense-neutral))
        ;;   ("KILL" . '(modus-themes-nuanced-red))
        ;;   ("QUESTION" . '(modus-themes-refine-blue))
        ;;   ("ANSWER" . '(modus-themes-special-cold))
        ;;   ("OK" . '(modus-themes-nuanced-blue))
        ;;   ("YES" . '(modus-themes-nuanced-green))
        ;;   ("NO" . '(modus-themes-nuanced-red))
        ;;   ("IDEA" . '(modus-themes-intense-magenta))
        ;;   ("YAK" . '(modus-themes-refine-magenta))
        ;;   )
        ))
(custom-set-faces!
  ;; '(org-superstar-header-bullet :inherit fixed-pitch-face :weight normal)
  )

(add-hook! org-mode (electric-indent-local-mode -1))
(add-hook! org-mode :append
           #'visual-line-mode)

(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
)
