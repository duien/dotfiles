#+TITLE: Doom Emacs Configuration
# Automatically tangle this file on save, defaulting to ~emacs-lisp~ in ~config.el~
# (Temporarily tangle to ~config-tangled~ instead to avoid destroying real config)
#+property: header-args:emacs-lisp :tangle config.el :comments no
#+auto_tangle: t

* Table of Contents :TOC_3:noexport:
- [[#general-setup][General Setup]]
  - [[#the-basics][The basics]]
  - [[#typography-and-appearance][Typography and appearance]]
    - [[#tweak-some-basic-faces][Tweak some basic faces]]
    - [[#ligatures][Ligatures]]
    - [[#modus][Modus]]
  - [[#customize-some-behavior][Customize some behavior]]
  - [[#customize-file-type-mappings-and-type-specific-behaviors][Customize file-type mappings and type-specific behaviors]]
  - [[#change-doom-defaults-that-i-dont-like][Change doom defaults that I don't like]]
- [[#packages][Packages]]
  - [[#treemacs][Treemacs]]
  - [[#projectile][Projectile]]
  - [[#orderless][Orderless]]
  - [[#org-mode][Org-mode]]
    - [[#simple-config-that-can-be-set-immediately][Simple config that can be set immediately]]
    - [[#override-doom-config-after-load][Override doom config after load]]
    - [[#set-up-hooks-for-org-behavior][Set up hooks for org behavior]]
    - [[#add-ons][Add-ons]]

* General Setup
I'm experimenting with a literate config tangled out of an org-mode file. It might be a terrible idea, but it seems like an interesting experiment.

** The basics
This makes things faster?

#+begin_src emacs-lisp
;;; config.el -*- lexical-binding: t; -*-

;; DO NOT EDIT THIS FILE DIRECTLY
;; This file is automatically generated from `config.org' and any changes will be over-written.
#+end_src

It's good to know who you are
#+begin_src emacs-lisp :comments no
(setq user-full-name "Emily Hyland"
      user-mail-address "emily@duien.com")
#+end_src

** Typography and appearance

Configure our main font through doom. To update the font without reloading, evaluate this block then run ~doom/reload-font~ with =SPC h r f=

#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Cascadia Code" :size 15 :weight 'semilight))
#+end_src

Next, set up basic text display properties

#+begin_src emacs-lisp
(setq ns-use-thin-smoothing t ;; not sure if this actually does anything useful?
      line-spacing 0.1
      display-line-numbers-type t ;; show absolute line numbers
      scroll-margin 5 ;; keep a few lines at the edge of the screen
      all-the-icons-scale-factor 1.0 ;; default of 1.2 is slightly too large
      emojify-emoji-set "twemoji-v2"
)
#+end_src

Set up some properties for doom themes. I'm not currently using these, but it's good to have them configured if I switch over sometimes.

#+begin_src emacs-lisp
(setq doom-themes-treemacs-enable-variable-pitch nil
      doom-themes-treemacs-theme "doom-atom" ;; not actually sure about the styling difference here
)
(setq doom-gruvbox-light-brighter-comments nil
      doom-gruvbox-light-variant "hard"
      doom-gruvbox-light-brighter-modeline t)
(setq doom-flatwhite-brighter-modeline t)
(setq doom-nord-light-brighter-modeline t)

(setq spacemacs-theme-comment-bg nil
      spacemacs-theme-comment-italic t
      spacemacs-theme-org-height nil)

#+end_src

*** DONE Get coding ligatures working without =prettify-symbols-mode= adding extra crap :noexport:
CLOSED: [2021-12-17 Fri 15:10]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-12-17 Fri 15:10]
:END:
*** TODO Find a way to automatically exclude tasks from TOC :noexport:

*** Tweak some basic faces

I don't like doing this through customize, as it tends to make things sneakily stick around when you remove a configuration if you don't explicitly unset it first (or edit it out of =customize.el=) but I think it's the simplest way to make sure it overrides themes even after switching.

#+begin_src emacs-lisp
(custom-set-faces!
  '(font-lock-comment-face :slant italic)
  '(font-lock-string-face  :slant italic)
  '(markdown-language-keyword-face :inherit markdown-pre-face :slant italic)
  '(line-number :weight semilight)
  '(line-number-current-line :weight semibold)
  )
#+end_src

Try to disable the weird character replacements from =prettify-symbols-mode= without getting rid of the real ligatures (turning it back off again)

#+begin_src emacs-lisp
(setq prettify-symbols-alist '())
#+end_src

*** Ligatures

#+begin_src emacs-lisp
(use-package! ligature
 :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t)
)
#+end_src

*** Modus

This is a theme with a lot of needs. But it's really well thought-out, and most of the complication is just in getting it set up.

#+begin_src emacs-lisp
(use-package! modus-themes
  :init
  ;; Set up modus config before loading
  (setq modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-subtle-line-numbers t
        modus-themes-intense-markup t
        modus-themes-fringes 'intense
        modus-themes-mode-line '(borderless)
        modus-themes-syntax '(green-strings)
        modus-themes-prompts '(gray background intense)
        modus-themes-region '(bg-only accented)
        modus-themes-org-blocks 'gray-background
        modus-themes-headings
        '((1 . (rainbow background))
          (t . (monochrome regular)))
        )
  ;; Load theme files
  (modus-themes-load-themes)
  :config
  ;; Load an actual theme
  ;; This happens through the light/dark hook
  )
#+end_src

In order to automatically switch between =modus-operandi= and =modus-vivendi= based on system appearance, we'll tap into =ns-system-appearance-change-functions= which will call its functions with either ~'light~ or ~'dark~

First, define the function for it to call, then add it to the hook

#+begin_src emacs-lisp
(defun eh/load-modus-variant (appearance)
  (pcase appearance
    ('light (modus-themes-load-operandi))
    ('dark  (modus-themes-load-vivendi)))
)
(setq ns-system-appearance-change-functions #'eh/load-modus-variant)
#+end_src

** Customize some behavior

Enable horizontal mouse scrolling

#+begin_src emacs-lisp
(setq mouse-wheel-tilt-scroll t)
#+end_src

Change where the new window goes when splitting

#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t
      )
#+end_src

And when splitting, pop up the menu to choose a new file automatically

#+begin_src emacs-lisp
(defadvice! prompt-for-buffer (&rest _)
  :after '(evil-window-split evil-window-vsplit)
  (projectile-find-file))
#+end_src


** Customize file-type mappings and type-specific behaviors

Github's =CODEOWNERS= file is basically in conf-mode

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("CODEOWNERS" . conf-mode))
#+end_src

When we're writing markdown, it's helpful to have the cursor move by visual line instead of logical line

#+begin_src emacs-lisp
(add-hook! markdown-mode :append
           #'visual-line-mode)
#+end_src

** Change doom defaults that I don't like

Set local leader to =,=

#+begin_src emacs-lisp
(setq doom-localleader-key ",")
(setq doom-localleader-alt-key "M-,")
#+end_src

Remove hooks that I don't want

#+begin_src emacs-lisp
(remove-hook 'doom-first-buffer-hook #'global-hl-line-mode) ;; don't turn on hl-line by default
(remove-hook 'after-change-major-mode-hook #'+ligatures-init-buffer-h) ;; this disables too many ligatures - find a way to disable just prettyify-symbols-mode that doesn't break everything else
#+end_src

Make =so-long-mode= less aggressive

#+begin_src emacs-lisp
(setq so-long-threshold 1000)
#+end_src


* Packages
I should probably create some custom layers for some of this configuration, but haven't really dug into what needs to happen for that.

** To explore and configure :noexport:
*** TODO Create a custom layer w/ SPC-ified keybindings for =annotate=
*** TODO Explore =code-review= package
*** TODO Explore workflow with bookmarks

** Treemacs

I like to toggle the file browser frequently, so bind that to =SPC \= for quick access

#+begin_src emacs-lisp
(map! :leader :desc "Toggle file browser" :n "\\" #'+treemacs/toggle)
#+end_src

Configure treemacs to automatically jump to the current file

#+begin_src emacs-lisp
(after! treemacs
    (treemacs-follow-mode t))
#+end_src

** Projectile

Discover projects in my common locations

#+begin_src emacs-lisp
(use-package! projectile
  :config
  (projectile-discover-projects-in-directory "~/Code/" 3)
  ;; Hoping to cover these by telling it to recurse 3 levels in Code
  ;; (projectile-discover-projects-in-directory "~/Code/gems/")
  ;; (projectile-discover-projects-in-directory "~/Code/Forks/")
  ;; (projectile-discover-projects-in-directory "~/Code/Other/")
  (projectile-discover-projects-in-directory "~/.homesick/repos/")
  )
#+end_src

** Orderless

Allow searching for fuzzy strings or excluding strings with orderless completion. I don't use these much in my day-to-day workflow, but let's keep them around as a pattern for how this configuration works.

#+begin_src emacs-lisp
(defun flex-if-twiddle (pattern _index _total)
  (when (string-suffix-p "~" pattern)
    `(orderless-flex . ,(substring pattern 0 -1))))

(defun without-if-bang (pattern _index _total)
  (cond
   ((equal "!" pattern)
    '(orderless-literal . ""))
   ((string-prefix-p "!" pattern)
    `(orderless-without-literal . ,(substring pattern 1)))))

(setq orderless-matching-styles '(orderless-regexp)
      orderless-style-dispatchers '(without-if-bang flex-if-twiddle))
#+end_src


** Org-mode

Org-mode is a bit of a beast to configure even in ideal circumstances. With doom, we also need to make sure we're overriding the org config that it sets up, since it often conflicts with my config

*** Simple config that can be set immediately

#+begin_src emacs-lisp
(setq org-directory "~/Library/Mobile Documents/com~apple~CloudDocs/Org/"
      org-log-done t
      org-log-into-drawer t
      org-cycle-separator-lines -1
      org-fontify-whole-heading-line t
      org-fontify-todo-headline t
      org-fontify-done-headline t
      org-ellipsis " ▼")
(setq org-superstar-cycle-headline-bullets nil
      org-superstar-special-todo-items t
      org-superstar-headline-bullets-list '("◌" "•"))
#+end_src

*** Override doom config after load

First, set up our todo keywords and the custom bullets for each of them

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords
        '((sequence "WAIT(w)" "FLAG(f)" "TODO(t)" "BLOK(b)" "HOLD(h)" "|" "DONE(d!)" "KILL(k@)")
          (sequence "QUESTION(q)" "|" "OK(o)" "YES(y)" "NO(n)" "ANSWER(a@)")
          (type "IDEA(I)" "YAK(Y)" "|")
          )
        ))
(after! org-superstar
  (setq org-superstar-todo-bullet-alist
        '(("TODO"     . ?⭘)
          ("FLAG"     . ?◍)
          ("DONE"     . ?·)
          ("WAIT"     . ?⏾)
          ("BLOK"     . ?▲)
          ("HOLD"     . ?≈)
          ("KILL"     . ?×)
          ("QUESTION" . ?◇) ;; QSTN
          ("ANSWER"   . ?◆) ;; ANSR
          ("OK"       . ?·)
          ("YES"      . ?·)
          ("NO"       . ?·)
          )
        org-superstar-prettify-item-bullets nil
        )
  )
#+end_src

Now, let's attempt to colorize those using modus faces and inheritance.

The example from the Modus documentation is
#+begin_src emacs-lisp :tangle no
(setq org-todo-keyword-faces
      '(("MEET" . '(bold org-todo))
        ("STUDY" . '(warning org-todo))
        ("WRITE" . '(shadow org-todo))))
#+end_src

Our own version of that will be a little more involved, probably. Let's give it a shot.

#+begin_src emacs-lisp
(after! org
  (setq org-todo-keyword-faces
        '(("TODO" . '(modus-themes-refine-green))
          ("FLAG" . '(modus-themes-intense-green))
          ("DONE" . '(modus-themes-nuanced-green))
          ("WAIT" . '(modus-themes-refine-yellow))
          ("BLOK" . '(modus-themes-intense-yellow))
          ("HOLD" . '(modus-themes-intense-neutral))
          ("KILL" . '(modus-themes-nuanced-red))
          ("QUESTION" . '(modus-themes-refine-blue))
          ("ANSWER" . '(modus-themes-special-cold))
          ("OK" . '(modus-themes-nuanced-blue))
          ("YES" . '(modus-themes-nuanced-green))
          ("NO" . '(modus-themes-nuanced-red))
          ("IDEA" . '(modus-themes-intense-magenta))
          ("YAK" . '(modus-themes-refine-magenta))
          )
        ))
#+end_src

#+begin_src emacs-lisp
(custom-set-faces!
  '(org-headline-todo :inherit default :foreground nil)
  '(org-headline-done :inherit font-lock-comment-face :weight semilight)
  )
#+end_src

**** DONE Set up coloring for different todo keywords
Ideally, these should use ~modus-color~ to get colors and adapt to light or dark variants
Also, set something better for ~org-headline-todo~ face (inherit from default?) and probably ~org-headline-done~ as well
***** FLAG This is flagged
***** DONE This is done
***** WAIT This is waiting
***** BLOK This is blocked
***** HOLD This is on hold
***** KILL This is no longer relevant
***** QUESTION This is a question
***** ANSWER This is the answer
***** OK This is dismissed
***** YES The answer was yes
***** NO The answer was no
***** IDEA This is something to try
***** YAK This is a rabbit-hole
**** TODO Set up capture templates
- Quickly add a note to the logbook linking back to source
- Create a todo in various different places
**** TODO After automatically changing to =modus-vivendi= there's something weird going on with how TODO comments are highlighted
In =config.el= the colors of the ~TODO~ didn't change, leaving it at a dark maroon. And it doesn't seem to correspond with the ~hl-todo~ face, which is bold bright orange. In strings inside the org buffer, it's highlighted with the ~warning~ face instead. But after a little while (and some various editing) the org todos now look like other buffers.
**** TODO Set up archiving all ~DONE~ tasks

*** Set up hooks for org behavior

Org has its own fancy indent situation, so electric indent is a bad idea. We also want to move by visual line instead of logical line, since we often have longer text that wraps.

#+begin_src emacs-lisp
(add-hook! org-mode (electric-indent-local-mode -1))
(add-hook! org-mode :append
           #'visual-line-mode)
#+end_src

*** Add-ons

Set up auto-tangling

#+begin_src emacs-lisp
(use-package! org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode)
)
#+end_src
