#+TITLE: A Beautiful Field Full of Yaks
#+startup: content
#+property: header-args:emacs-lisp :tangle init.el
#+auto_tangle: t

* Early initialization
:PROPERTIES:
:visibility: folded
:header-args: :emacs-lisp :tangle early-init.el
:END:

A bunch of random performance stuff that I've grabbed up. This remains a part I probably won't really understand all that well.

#+begin_src emacs-lisp tangle: early-init.el
;;; early-init.el -*- lexical-binding: t; no-byte-compile: t -*-

;; Defer garbage collection further back in the startup process
(setq gc-cons-threshold most-positive-fixnum
      gc-cons-percentage 0.6)

;; In Emacs 27+, package initialization occurs before `user-init-file' is
;; loaded, but after `early-init-file'. Doom handles package initialization, so
;; we must prevent Emacs from doing it early!
(setq package-enable-at-startup nil)
;; Do not allow loading from the package cache (same reason).
(setq package-quickstart nil)

;; Prevent the glimpse of un-styled Emacs by disabling these UI elements early.
(push '(menu-bar-lines . 0) default-frame-alist)
(push '(tool-bar-lines . 0) default-frame-alist)
(push '(vertical-scroll-bars) default-frame-alist)
(push '(height . 50) default-frame-alist)
(push '(width . 100) default-frame-alist)

;; Resizing the Emacs frame can be a terribly expensive part of changing the
;; font. By inhibiting this, we easily halve startup times with fonts that are
;; larger than the system default.
(setq frame-inhibit-implied-resize t)

;; Disable GUI elements
(tool-bar-mode -1)
(scroll-bar-mode -1)
(setq inhibit-splash-screen t)
(setq use-file-dialog nil)
#+end_src

* Basic setup
** Add a preamble

#+begin_src emacs-lisp :tangle init.el
;;; init.el -*- lexical-binding: t; no-byte-compile: t; -*-

;; DO NOT EDIT THIS FILE
;; This file is auto-generated from `README.org` so any changes made directly will be lost.

;; Lots of things stolen from https://www.lucacambiaghi.com/vanilla-emacs/readme.html
#+end_src

** Bootstrap straight and use-package
#+begin_src emacs-lisp
;; Bootstrap straight
(setq straight-use-package-by-default t)
(setq straight-vc-git-default-clone-depth 1)
(setq straight-recipes-gnu-elpa-use-mirror t)
(setq straight-check-for-modifications nil)
(setq use-package-always-defer t)
(defvar bootstrap-version)
(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
        (url-retrieve-synchronously
         "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
         'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
(straight-use-package 'use-package)
#+end_src

** Basic emacs config
#+begin_src emacs-lisp
(use-package emacs
  :init
  (setq inhibit-startup-screen t
        sentence-end-double-space nil
        )

  (setq user-full-name "Emily Hyland"
        user-mail-address "hello@duien.com")

  (set-face-attribute 'default nil :font "Rec Mono Duotone" :height 160 :weight 'normal)
  (set-face-attribute 'fixed-pitch nil :font "Rec Mono Duotone" :height 160 :weight 'normal)
  (set-face-attribute 'variable-pitch nil :font "Recursive Sans Casual Static" :height 160 :weight 'normal)

  (setq read-process-output-max (* 1024 1024)) ;; 1mb

  ;; always allow 'y' instead of 'yes'.
  (defalias 'yes-or-no-p 'y-or-n-p)

  ;; default to utf-8 for all the things
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8
        coding-system-for-read 'utf-8
        coding-system-for-write 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (setq default-process-coding-system '(utf-8-unix . utf-8-unix))

  ;; write over selected text on input... like all modern editors do
  (delete-selection-mode t)

  ;; enable recent files mode.
  (recentf-mode t)
  (setq recentf-exclude `(,(expand-file-name "straight/build/" user-emacs-directory)
                          ,(expand-file-name "eln-cache/" user-emacs-directory)
                          ,(expand-file-name "etc/" user-emacs-directory)
                          ,(expand-file-name "var/" user-emacs-directory)))

  ;; don't want ESC as a modifier
  ;; advice would say use `keyboard-esc-quit' as the binding here,
  ;; which is what's originally bound to `ESC-ESC-ESC' but that
  ;; makes it too easy to end up closing additional windows, which
  ;; is basically never what I want when hitting `ESC'
  ;; it turns out, however, that `keyboard-quit' is not what I
  ;; want either since it doesn't get me out of the minibuffer.
  ;; UGH
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (setq-default buffer-quit-function
	              #'(lambda () (beep)))

  ;; Don't persist a custom file, this bites me more than it helps
  (setq custom-file (make-temp-file "")) ; use a temp file as a placeholder
  (setq custom-safe-themes t)            ; mark all themes as safe, since we can't persist now
  (setq enable-local-variables :all)     ; fix =defvar= warnings

  ;; follow symlinks 
  (setq vc-follow-symlinks t)

  ;; don't show any extra window chrome
  (when (window-system)
    (tool-bar-mode -1)
    (toggle-scroll-bar -1))

  ;; enable winner mode globally for undo/redo window layout changes
  (winner-mode t)

  (show-paren-mode t)
  (display-fill-column-indicator-mode 1)

  ;; less noise when compiling elisp
  (setq byte-compile-warnings '(not free-vars unresolved noruntime lexical make-local))
  (setq native-comp-async-report-warnings-errors nil)
  (setq load-prefer-newer t)


  ;; clean up the mode line
  (display-time-mode -1)
  (setq column-number-mode t)

  ;; use common convention for indentation by default
  (setq-default indent-tabs-mode nil) ;; never use tabs to indent 
  (setq-default tab-width 2)

  (setq tab-always-indent t)
  (setq require-final-newline t)

  ;; Enable horizontal scrolling
  (setq mouse-wheel-tilt-scroll t)

  )
#+end_src

***  YAK Break up and organize these settings

** Adjust things for mac

#+begin_src emacs-lisp
;;; MAC THINGS

(use-package emacs
  :init
  (when (eq system-type 'darwin)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'super)
    (setq mac-control-modifier 'control)
    )
  ;; when on emacs-mac 
  (when (fboundp 'mac-auto-operator-composition-mode)
    ;; disable * ligatures for org, enable w for www
    (setq mac-auto-operator-composition-characters "!\"#$%&'()+,-./:;<=>?@[\\]^_`{|}~w")
    (mac-auto-operator-composition-mode)   ;; enables font ligatures
    ;; (global-set-key [(s c)] 'kill-ring-save)
    ;; (global-set-key [(s v)] 'yank)
    ;; (global-set-key [(s x)] 'kill-region)
    ;; (global-set-key [(s q)] 'save-buffers-kill-emacs)
    )
  )
#+end_src

** Create theme loading hook
#+begin_src emacs-lisp
(defvar after-enable-theme-hook nil
   "Normal hook run after enabling a theme.")

(defun run-after-enable-theme-hook (&rest _args)
   "Run `after-enable-theme-hook'."
   (run-hooks 'after-enable-theme-hook))

(advice-add 'enable-theme :after #'run-after-enable-theme-hook)
#+end_src

* Set up packages
** Keybindings with general

#+begin_src emacs-lisp
(use-package general
  :demand t
  :config
 )
#+end_src

** Completion and menus
*** TODO Add binding for =consult-imenu=
*** Use vertico for interactive completion
#+begin_src emacs-lisp
(use-package vertico
  :init
  (vertico-mode)
  )
#+end_src

*** Use orderless matching style
#+begin_src emacs-lisp
(use-package orderless
  :config
  (defun flex-if-twiddle (pattern _index _total)
    (when (string-suffix-p "~" pattern)
      `(orderless-flex . ,(substring pattern 0 -1))))

  (defun without-if-bang (pattern _index _total)
    (cond
     ((equal "!" pattern)
      '(orderless-literal . ""))
     ((string-prefix-p "!" pattern)
      `(orderless-without-literal . ,(substring pattern 1)))))
  :init
  (setq orderless-matching-styles '(orderless-regexp)
        orderless-style-dispatchers '(without-if-bang flex-if-twiddle))
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles partial-completion)))))
#+end_src

*** Use consult for completing read
Other consult notes: ~consult-buffer~ is great, includes extra stuff
Take a look at ~consult-project-root-function~ for project functionality, ~consult-buffer-sources~ and ~consult--multi~ for virtual buffer sources
#+begin_src emacs-lisp
;; `consult' replaces `completing-read' with a nice interface
;; that we can extend as we want
(use-package consult
  :init
  (setq consult-project-root-function #'projectile-project-root)
  :general
  ("C-c l" 'consult-line)
  ("C-x b" 'consult-buffer)
  ("<help> a" 'consult-apropos)
)
#+end_src

*** Show marginalia when completing
#+begin_src emacs-lisp
(use-package marginalia
  :init
  (marginalia-mode))
#+end_src

*** Use which-key to show menu of keybindings when you pause
#+begin_src emacs-lisp
(use-package which-key
  :config
  ;; this is the default
  (which-key-setup-side-window-bottom)
  :init
  (which-key-mode))
#+end_src

*** TODO Try out =embark=
** Some basic UI stuff
#+begin_src emacs-lisp
;; when using visual-line-mode, wrap to the `fill-column'
;; it seems to have a side-effect of not allowing the
;; window to get narrower than the fill column which
;; is not exactly helpful
;; (use-package window-margin
;;   :hook
;;   (text-mode . 'turn-on-window-margin-mode)
;;   ;; (org-mode . 'turn-on-window-margin-mode)
;;   )
(use-package all-the-icons
  :demand
  :if (display-graphic-p))

(use-package moody
  :demand
  :config
  (setq x-underline-at-descent-line t)
  (moody-replace-mode-line-buffer-identification)
  (moody-replace-vc-mode)
  (moody-replace-eldoc-minibuffer-message-function))

;; Use a darker background color for non-file-visiting buffers
;; Unfortunately, it seems like the methods that solaire and
;; moody use are incompatible, so the little moody tab doesn't
;; get swapped to the darker solaire color
(use-package solaire-mode
  :init
  (solaire-global-mode 1))

(use-package minions
  :config
  (setq minions-mode-line-lighter "≡")
  :init (minions-mode 1))

(use-package ws-butler
  :commands (ws-butler-mode)
  :hook
  (prog-mode . ws-butler-mode))

(use-package rotate)
#+end_src

*** Text wrapping enhancements
#+begin_src emacs-lisp
(use-package visual-fill-column
  :config
  (setq-default visual-fill-column-extra-text-width '(2 . 2))
  :hook
  (visual-line-mode . visual-fill-column-mode))
(use-package adaptive-wrap)
#+end_src

*** Some custom commands
**** expand-region
#+begin_src emacs-lisp
(use-package expand-region
  :bind ("C-=" . er/expand-region))
#+end_src
**** crux
https://github.com/bbatsov/crux
There's lots more commands, but these are the big winners
#+begin_src emacs-lisp
(use-package crux
:bind 
("C-o" . crux-smart-open-line)
("M-o" . crux-smart-open-line-above)
("C-k" . crux-smart-kill-line)
)
#+end_src
**** symbol-overlay
https://github.com/wolray/symbol-overlay
#+begin_src emacs-lisp
(use-package symbol-overlay
  :general
  ;; (global-set-key (kbd "M-i") 'symbol-overlay-put)
  ;; (global-set-key (kbd "M-n") 'symbol-overlay-switch-forward)
  ;; (global-set-key (kbd "M-p") 'symbol-overlay-switch-backward)
  ;; (global-set-key (kbd "<f7>") 'symbol-overlay-mode)
  ;; (global-set-key (kbd "<f8>") 'symbol-overlay-remove-all)
  )
#+end_src
**** pulsar
Pulse the current line when moving around
#+begin_src emacs-lisp
(use-package pulsar
  :straight
  '(pulsar :type git :host gitlab :repo "protesilaos/pulsar")
  :init
  (pulsar-setup)
  :bind ("C-x l" . pulsar-pulse-line))
#+end_src

*** HOLD Smartparens has got to be better than electric pairs

#+begin_src emacs-lisp
(use-package smartparens
  :config
  ;; show-smartparens-mode
) 
#+end_src

The =autopair= author says that =electric-pair-mode= is good now. There's also =smartparens= which I guess is something different.
*** Try out popper
Basic setup from their README
#+begin_src emacs-lisp
(use-package popper
  :ensure t ; or :straight t
  :bind (("C-`"   . popper-toggle-latest)
         ("M-`"   . popper-cycle)
         ("C-M-`" . popper-toggle-type))
  :init
  (setq popper-reference-buffers
        '("\\*Messages\\*"
          "Output\\*$"
          "\\*Async Shell Command\\*"
          help-mode
          compilation-mode))
  (popper-mode +1)
  (popper-echo-mode +1))                ; For echo area hints
#+end_src

*** KILL Get visual evil state into mode-line
CLOSED: [2022-02-13 Sun 16:13]
:LOGBOOK:
- State "KILL"       from "TODO"       [2022-02-13 Sun 16:13] \\
  Getting rid of evil mode, apparently
:END:

*** TODO Try out origami for folding
https://github.com/gregsexton/origami.el
#+begin_src emacs-lisp
(use-package origami)
#+end_src
**** TODO Figure out main functions and keybindings
*** TODO Try out god-mode maybe?
#+begin_src emacs-lisp tangle: no
(use-package god-mode
  :config
  ;; This which-key situation does not seem to work at all, sadly
  ;; (set to t to enable the broken support)
  (which-key-enable-god-mode-support nil)
  ;; (global-set-key (kbd "<escape>") #'god-local-mode)
  (defun my-god-mode-update-cursor-type ()
    (setq cursor-type (if (or god-local-mode buffer-read-only) 'box 'bar)))

  (add-hook 'post-command-hook #'my-god-mode-update-cursor-type)
  (defun my-god-mode-update-mode-line ()
    (cond
     (god-local-mode
      (set-face-attribute 'mode-line nil
                          :foreground "#604000"
                          :background "#fff29a")
      (set-face-attribute 'mode-line-inactive nil
                          :foreground "#3f3000"
                          :background "#fff3da"))
     (t
      (set-face-attribute 'mode-line nil
			                    :foreground "#0a0a0a"
			                    :background "#d7d7d7")
      (set-face-attribute 'mode-line-inactive nil
			                    :foreground "#404148"
			                    :background "#efefef"))))

  (add-hook 'post-command-hook 'my-god-mode-update-mode-line)
  )
#+end_src


** Project management with projectile
#+begin_src emacs-lisp 
(use-package projectile
  :config
  (setq projectile-project-search-path
        '(("~/Code" . 3)
        ("~/.homesick/repos" . 1)))
  (projectile-add-known-project "~/Org/")
  :init
  (projectile-mode +1)
  :general
  ("C-x p" '(:keymap projectile-command-map :package projectile))
)
#+end_src
I believe this also needs =persp-mode= do really do what I want (which is the isolated buffers, etc.)

*** TODO Pare down the keymapping to just things I use
*** ANSR What if we tried to just do this with =project.el=?
CLOSED: [2021-12-29 Wed 12:16]
:LOGBOOK:
- State "ANSR"       from "QSTN"       [2021-12-29 Wed 12:16] \\
  It works fine for basic things like ~find-in-project~ but I don't see how to easily get fancier functionality like auto-discovered projects in a menu
:END:

** File sidebar with treemacs
#+begin_src emacs-lisp
(use-package treemacs
  :config
(treemacs-follow-mode t))
(use-package treemacs-projectile
  :after (treemacs projectile))
  #+end_src
** Workspaces with perspective
Fun note: =persp-mode= and =perspective= are two separate modes; the former is a fork of the latter. It seems like this one is easier to configure?
#+begin_src emacs-lisp
(use-package perspective
  :bind
  ;; (("C-x b" . persp-switch-to-buffer*)
  ;;  ("C-x k" . persp-kill-buffer*))
  :config
  (setq persp-state-default-file "~/.perspective")
  (add-hook 'kill-emacs-hook #'persp-state-save)
  (persp-mode))
#+end_src

** Version control

#+begin_src emacs-lisp
(use-package magit
  :general
  ("C-c g" 'magit)
)
(use-package diff-hl
  :config

  :hook
  (magit-pre-refresh  . diff-hl-magit-pre-refresh)
  (magit-post-refresh . diff-hl-magit-post-refresh)
  :init (global-diff-hl-mode)
  )
#+end_src

*** DONE Set up =g= submenu keybindings
CLOSED: [2021-12-28 Tue 12:04]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-12-28 Tue 12:04]
:END:
*** HOLD Forge and code-review

** Programming languages
*** TODO Ruby
Probably want [[https://github.com/zenspider/enhanced-ruby-mode][Enhanced Ruby Mode]] and [[https://github.com/pezra/rspec-mode][Rspec Mode]]
*** TODO Elixir

Let's set up basic elixir language support as well as alchemist for fancy documentation stuff.

#+begin_src emacs-lisp
(use-package elixir-mode)
(use-package alchemist)
#+end_src

*** TODO Javascript
Getting a decent setup for Vue is not trivial. Let's start with web-mode which is at least passable.
#+begin_src emacs-lisp
(use-package web-mode
  :config
  (setq web-mode-markup-indent-offset 2
        web-mode-css-indent-offset 2
        web-mode-code-indent-offset 2)
)
#+end_src
*** TODO Templating
Set up necessary modes for various front-end concerns
#+begin_src emacs-lisp
(use-package haml-mode)
(use-package slim-mode)
#+end_src
** Misc smaller modes

#+begin_src emacs-lisp
(use-package fish-mode)
(use-package rainbow-mode)
(use-package vterm)
(use-package markdown-mode
  :hook
  (gfm-mode . variable-pitch-mode)
  (markdown-mode . variable-pitch-mode)
  :mode
  (("\\.\\(?:md\\|markdown\\|mkd\\|mdown\\|mkdn\\|mdwn\\)\\'" . gfm-mode)))
(use-package persistent-scratch
  :demand t
  :config
  (persistent-scratch-setup-default)
  (persistent-scratch-mode 1))
#+end_src

* Org
** Basic configuration
#+begin_src emacs-lisp
(use-package org
  :config
  (setq org-directory "~/Org/"
        org-agenda-files '("~/Org/")
        org-refile-targets '((org-agenda-files . (:maxlevel . 5)))
        org-log-done t
        org-log-into-drawer t
        org-insert-heading-respect-content t
        org-cycle-separator-lines 2 ;; 2 blank lines to keep when collapsed
        org-indent-mode-turns-on-hiding-stars nil
        org-hide-leading-stars nil
        org-ellipsis " …"
        org-fontify-whole-block-delimiter-line nil
        org-fontify-whole-heading-line t
        org-fontify-todo-headline t
        org-fontify-done-headline t)
  (setq org-src-preserve-indentation t)
  (setq org-todo-keywords
        '((sequence "WAIT(w)" "FLAG(f)" "TODO(t)" "BLOK(b)" "HOLD(h)" "|" "DONE(d!)" "KILL(k@)")
          (sequence "QSTN(q)" "|" "  OK(o)" " YES(y)" "  NO(n)" "ANSR(a@)")
          (type "IDEA(I)" " YAK(Y)" "|")
          )
        )
  ;; define faces to use for all org todo keywords

  ;; completed states
  (defface eh/org-keyword-done '((t :inherit org-done)) "Face used for the DONE keyword in Org")
  (defface eh/org-keyword-kill '((t :inherit org-done)) "Face used for the KILL keyword in Org")
  (defface eh/org-keyword-answer '((t :inherit org-done)) "Face used for the ANSR keyword in Org")
  (defface eh/org-keyword-ok '((t :inherit eh/org-keyword-answer)) "Face used for the OK keyword in Org")
  (defface eh/org-keyword-yes '((t :inherit eh/org-keyword-done)) "Face used for the YES keyword in Org")
  (defface eh/org-keyword-no '((t :inherit eh/org-keyword-kill)) "Face used for the NO keyword in Org")

  ;; incomplete states

  (defface eh/org-keyword-wait '((t :inherit org-done)) "Face used for the WAIT keyword in Org")
  (defface eh/org-keyword-flag '((t :inherit org-todo)) "Face used for the FLAG keyword in Org")
  (defface eh/org-keyword-todo '((t :inherit org-todo)) "Face used for the TODO keyword in Org")
  (defface eh/org-keyword-block '((t :inherit org-todo)) "Face used for the BLOK keyword in Org")
  (defface eh/org-keyword-hold '((t :inherit org-todo)) "Face used for the HOLD keyword in Org")
  (defface eh/org-keyword-question '((t :inherit org-todo)) "Face used for the QSTN keyword in Org")
  (defface eh/org-keyword-idea '((t :inherit org-todo)) "Face used for the IDEA keyword in Org")
  (defface eh/org-keyword-yak '((t :inherit org-todo)) "Face used for the YAK keyword in Org")

  (setq org-todo-keyword-faces
        `(("TODO" . eh/org-keyword-todo)
          ("FLAG" . eh/org-keyword-flag)
          ("DONE" . eh/org-keyword-done)
          ("HOLD" . eh/org-keyword-hold)
          ("BLOK" . eh/org-keyword-block)
          ("WAIT" . eh/org-keyword-wait)
          ("KILL" . eh/org-keyword-kill)
          ("QSTN" . eh/org-keyword-question)
          ("ANSR" . eh/org-keyword-answer)
          ("  OK" . eh/org-keyword-ok)
          (" YES" . eh/org-keyword-yes)
          ("  NO" . eh/org-keyword-no)
          ("IDEA" . eh/org-keyword-idea)
          (" YAK" . eh/org-keyword-yak)
          ))

  (defun eh/org-update-theme ()
    (set-face-attribute 'org-todo nil
                        :inherit 'fixed-pitch
                        :weight (face-attribute 'bold :weight))
    (set-face-attribute 'org-done nil
                        :inherit 'fixed-pitch
                        :weight (face-attribute 'default :weight))
    (set-face-attribute 'org-headline-todo nil
                        :foreground (modus-themes-color 'fg-main)
                        :weight 'normal
                        :inherit nil)
    (set-face-attribute 'org-headline-done nil
                        :inherit '(font-lock-comment-face default))
    (set-face-attribute 'org-hide nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch)
    )
  (defun eh/org-update-modus-theme ()
    (set-face-attribute 'eh/org-keyword-todo nil
                        :inherit '(modus-themes-refine-green org-todo))
    (set-face-attribute 'eh/org-keyword-flag nil
                        :inherit '(modus-themes-intense-green org-todo))
    (set-face-attribute 'eh/org-keyword-wait nil
                        :inherit '(modus-themes-refine-yellow org-done))
    (set-face-attribute 'eh/org-keyword-block nil
                        :inherit '(modus-themes-intense-red org-todo))
    (set-face-attribute 'eh/org-keyword-hold nil
                        :inherit '(modus-themes-intense-neutral org-done))
    (set-face-attribute 'eh/org-keyword-question nil
                        :inherit '(modus-themes-refine-blue org-todo))
    (set-face-attribute 'eh/org-keyword-idea nil
                        :inherit '(modus-themes-refine-cyan org-todo))
    (set-face-attribute 'eh/org-keyword-yak nil
                        :inherit '(modus-themes-refine-magenta org-todo))
    (set-face-attribute 'eh/org-keyword-done nil
                        :inherit '(modus-themes-nuanced-green org-done)
                        :foreground (modus-themes-color 'green-faint))
    (set-face-attribute 'eh/org-keyword-kill nil
                        :inherit '(modus-themes-nuanced-red org-done)
                        :foreground (modus-themes-color 'red-faint))
    (set-face-attribute 'eh/org-keyword-answer nil
                        :inherit '(modus-themes-nuanced-blue org-done)
                        :foreground (modus-themes-color 'blue-faint))
    (set-face-attribute 'eh/org-keyword-ok nil
                        :inherit 'eh/org-keyword-answer
                        :foreground (modus-themes-color 'blue))
    (set-face-attribute 'eh/org-keyword-yes nil
                        :inherit 'eh/org-keyword-done
                        :foreground (modus-themes-color 'green))
    (set-face-attribute 'eh/org-keyword-no nil
                        :inherit 'eh/org-keyword-kill
                        :foreground (modus-themes-color 'red))
    )

  :hook (org-mode . (lambda()
                      (org-indent-mode 1)
                      (electric-indent-local-mode -1)
                      (visual-line-mode 1)
                      (variable-pitch-mode 1)
                      ))
  (after-enable-theme . eh/org-update-theme)
  (modus-themes-after-load-theme . eh/org-update-modus-theme)
  )
#+end_src

** KILL Consult headline
CLOSED: [2021-12-29 Wed 11:59]
:LOGBOOK:
- State "KILL"       from "TODO"       [2021-12-29 Wed 11:59] \\
  Should be handled by =consult-imenu= binding
:END:
**  YAK Why does =consult-headline= not actually find all the headlines?
For instance, the "Org" headline doesn't show up when you search for "org"
** TODO Keys for entering and exiting dedicated editing of org source blocks
Can use =C-c '= which isn't terrible, but isn't evil-ish
** TODO Key for change todo state
Emacs-style is =C-c C-t=
** Theming is complicated
*** DONE Set todo faces as actual ~defface~ faces for happier theming
CLOSED: [2021-12-28 Tue 19:24]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-12-28 Tue 19:24]
:END:
Once this is done, changing those faces will allow changing the live keywords without having to reload org
*** DONE Anything configured wth ~set-face-attribute~ has to be redone after theme change
CLOSED: [2021-12-28 Tue 16:41]
:LOGBOOK:
- State "DONE"       from "TODO"       [2021-12-28 Tue 16:41]
:END:
Added a ~after-enable-theme~ hook where they can be set
** Some org add-ons

#+begin_src emacs-lisp
(use-package org-superstar 
  :config
  (setq org-superstar-cycle-headline-bullets nil
        org-superstar-special-todo-items t
        org-superstar-leading-fallback "·"
        org-superstar-leading-bullet "·"
        org-superstar-remove-leading-stars nil
        org-superstar-headline-bullets-list '("#" "•")) ;;◌◎
  (setq org-superstar-todo-bullet-alist
        '(("TODO"     . ?›) ;;⭘▢
          ("FLAG"     . ?») ;;◍▶
          ("DONE"     . ?✓)
          ("WAIT"     . ?≈) ;;⏾◷
          ("BLOK"     . ?◊) ;;▲
          ("HOLD"     . ?~)
          ("KILL"     . ?×) ;;❌×
          ("QSTN"     . ??) ;;◊◇
          ("ANSR"     . ?•) ;;⬥
          ("  OK"     . ?·)
          (" YES"     . ?·)
          ("  NO"     . ?·)
          ("IDEA"     . ?•)
          (" YAK"     . ?∞) ;;∞◦
          ;; →←·•*#›»
          )
        org-superstar-prettify-item-bullets nil
        )
  (defun eh/org-superstar-update-theme ()
    (set-face-attribute 'org-superstar-header-bullet nil :weight (face-attribute 'default :weight) :font (face-attribute 'fixed-pitch :font))
    (set-face-attribute 'org-superstar-leading nil :foreground (face-attribute 'mode-line :background)))
  :hook 
  (org-mode . org-superstar-mode)
  (after-enable-theme . eh/org-superstar-update-theme)
  )

(use-package org-auto-tangle
  :defer t
  :hook (org-mode . org-auto-tangle-mode))

(use-package toc-org
  :hook (org-mode . toc-org-mode))
#+end_src

** Testing out todo faces                                         :noexport:
:PROPERTIES:
:visibility: folded
:END:
This is a longer bit ... wait ... 
*** TODO A task
*** FLAG Is important
*** DONE Is complete
*** WAIT isn't ready to start on
*** HOLD is paused
*** BLOK can't be worked on
*** KILL Is no longer relevant
*** IDEA Is something that might be cool
***  YAK Is yacky
*** QSTN Is only partly configured
*** ANSR Is also broken
***  YES Affirmative
***   NO Not so much
***   OK This is fine
** More complex configuration
*** TODO Set up super-agenda
#+begin_src emacs-lisp
(use-package org-super-agenda
  :config
  (setq org-super-agenda-groups
        '(
          (:name "Flagged" :todo "FLAG")
          (:name "Follow Up" :todo ("QSTN" "BLOK"))
          (:name "To Do" :and (:todo "TODO" :children nil))
          (:name "Stalled" :todo ("HOLD" "WAIT"))
)))
#+end_src
*** TODO Set up capture templates
*** TODO Maybe org-journal?

* Themes and stuff

#+begin_src emacs-lisp
;; VISUALS AT THE END FOR SOME REASON

;; Set themes
(use-package modus-themes
  :init
  (setq modus-themes-mixed-fonts t
        modus-themes-variable-pitch-ui t
        modus-themes-italic-constructs t
        modus-themes-bold-constructs t
        modus-themes-subtle-line-numbers t
        modus-themes-markup '(background intense)
        modus-themes-links '(background)
        modus-themes-fringes nil ;; background of fringe area
        modus-themes-mode-line '(moody accented)
        modus-themes-syntax '(green-strings)
        modus-themes-org-blocks 'gray-background
        modus-themes-completions '((t background intense accented))
        modus-themes-region '(bg-only accented)
        ;; modus-themes-headings
        ;; '((1 . (bold))
        ;;   (t . ()))
        )
  (defun eh/modus-customize ()
    ;; deal with git gutter faces? or maybe that's no longer an issue?
    (set-face-attribute 'font-lock-string-face nil :slant 'italic)
    )
  (defun eh/load-theme (appearance)
    "Load theme, taking current system APPEARANCE into consideration."
    (mapc #'disable-theme custom-enabled-themes)
    (pcase appearance
      ('light (modus-themes-load-operandi))
      ('dark (modus-themes-load-vivendi))))

  (add-hook 'ns-system-appearance-change-functions #'eh/load-theme)
  ;; load the theme files
  (modus-themes-load-themes)
  :hook (modus-themes-after-load-theme . eh/modus-customize)
  ;; :config
  ;; (modus-themes-load-operandi)
  )

#+end_src 


